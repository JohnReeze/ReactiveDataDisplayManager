//
//  Event.swift
//  SampleEventHandling
//
//  Created by Alexander Kravchenkov on 01.08.17.
//  Copyright ¬© 2017 Alexander Kravchenkov. All rights reserved.
//

import Foundation

public protocol Event {

    associatedtype Input
    typealias Lambda = (Input)->(Void)

    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π
    ///
    /// - Parameter listner: –ù–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å
    func addListner(_ listner: @escaping Lambda)

    /// –û–ø–æ–≤–µ—â–∞–µ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ –ø—Ä–æ–∏—à–µ–¥—à–µ–º —Å–æ–±—ã—Ç–∏–∏
    ///
    /// - Parameter input: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π.
    func invoke(with input: Input)
}

/// –≠–≤–µ–Ω—Ç, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
public protocol ValueEvent {

    associatedtype Input
    associatedtype Return

    typealias Lambda = (Input)->(Return)

    var valueListner: Lambda? { get set }
}
/// –ë–∞–∑–æ–≤–∞—è –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ–∞—Ä—è –æ–ø—è—Ç—å –∂–µ –º–æ–∂–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ.
/// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –ª–∏–±–æ —Å–∞–±–∫–ª–∞—Å–∏–º—Å—è, –ª–∏–±–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –∏ –∏–º–ª–µ–º–µ–Ω—Ç–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã üí™
public class BaseEvent<Input>: Event {

    // MARK: - Other

    public typealias Lambda = (Input)->(Void)

    public static func += (left: BaseEvent<Input>, right: @escaping Lambda) {
        left.addListner(right)
    }

    private var listners: [Lambda]

    public init() {
        self.listners = [Lambda]()
    }

    public func addListner(_ listner: @escaping Lambda) {
        self.listners.append(listner)
    }

    public func invoke(with input: Input) {
        self.listners.forEach({$0(input)})
    }
}

/// –ë–∞–∑–æ–≤–∞—è –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —É–º–µ–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ. –≠—Ç–∞ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –æ–ø—è—Ç—å –∂–µ –º–æ–∂–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ.
/// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –ª–∏–±–æ —Å–∞–±–∫–ª–∞—Å–∏–º—Å—è, –ª–∏–±–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –∏ –∏–º–ª–µ–º–µ–Ω—Ç–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã üí™
public class BaseValueEvent<Input, Return>: ValueEvent {

    public typealias Lambda = (Input)->(Return)

    public var valueListner: Lambda?
}
